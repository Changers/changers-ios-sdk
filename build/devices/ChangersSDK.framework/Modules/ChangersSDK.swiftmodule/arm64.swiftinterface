// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ChangersSDK
import CoreLocation
import CoreMotion
import Foundation
import MessageUI
import MotionTagSDK
import SafariServices
import Social
import StoreKit
import Swift
import UIKit
import WebKit
public enum ChangersAuthenticateError : Swift.Error {
  case unknownError
  case connectionError
  case credentialsError
  case configError
  public static func == (a: ChangersSDK.ChangersAuthenticateError, b: ChangersSDK.ChangersAuthenticateError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct ChangersStatistic : Swift.Codable {
  public let user: ChangersSDK.ChangersStatistic.StatisticUser
  public let organisation: ChangersSDK.ChangersStatistic.StatisticGlobal
  public let charity: ChangersSDK.ChangersStatistic.Charity?
  public struct Charity : Swift.Codable {
    public var userTreesPlanted: Swift.Int {
      get
    }
    public var totalTreesPlanted: Swift.Int {
      get
    }
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct StatisticGlobal : Swift.Codable {
    public let walkingDistance: Swift.Double
    public let cyclingDistance: Swift.Double
    public let co2Avoided: Swift.Double
    public let coins: Swift.Double
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct StatisticUser : Swift.Codable {
    public let walkingDistance: Swift.Double
    public let cyclingDistance: Swift.Double
    public let co2Avoided: Swift.Double
    public let coins: Swift.Double
    public let co2ForNextCoin: Swift.Double?
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension ChangersAuthenticateError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol ChangersDelegate : AnyObject {
  func setupDidFinish(with uiid: Swift.String)
  func setupDidFail(with error: ChangersSDK.ChangersAuthenticateError?)
}
public protocol ChangersStatisticDelegate : AnyObject {
  func statisticDidFail(with error: ChangersSDK.ChangersAuthenticateError?)
  func statisticDidSuccess(with statistic: ChangersSDK.ChangersStatistic)
}
public enum ChangersEnv : Swift.String {
  case stage
  case production
  case development
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct ChangersConfig {
  public init(clientId: Swift.Int, clientSecret: Swift.String, clientName: Swift.String, environment: ChangersSDK.ChangersEnv = .stage)
}
public typealias UUID = Swift.String
@objc @_inheritsConvenienceInitializers public class Changers : ObjectiveC.NSObject {
  public static var versionSDK: Swift.String {
    get
  }
  weak public var delegate: ChangersSDK.ChangersDelegate?
  weak public var statisticDelegate: ChangersSDK.ChangersStatisticDelegate?
  public static var isReady: Swift.Bool {
    get
  }
  public static func loadWebApp(on viewController: UIKit.UIViewController, completion: (() -> Swift.Void)? = nil)
  public static func webApp() -> UIKit.UIViewController
  public var debug: Swift.Bool {
    get
    set
  }
  public var maxDebug: Swift.Bool {
    get
    set
  }
  public func initSDK(with config: ChangersSDK.ChangersConfig, uuid: ChangersSDK.UUID?)
  public func setup()
  public func cleanState()
  public func referralLink(_ str: Swift.String?) -> Swift.Bool
  public func fetchStatistic()
  @objc deinit
  @objc override dynamic public init()
}
extension ChangersSDK.ChangersAuthenticateError : Swift.Equatable {}
extension ChangersSDK.ChangersAuthenticateError : Swift.Hashable {}
extension ChangersSDK.ChangersEnv : Swift.Equatable {}
extension ChangersSDK.ChangersEnv : Swift.Hashable {}
extension ChangersSDK.ChangersEnv : Swift.RawRepresentable {}
